GIT 学习记录

   git init									--git初始化，生成.git文件
   git add filename							--git提交文件到暂存区
   git commit -m "git comment info"			--git提交文件到master
   
   git status								--git状态查询
   
   git diff filename						--文件filename修改查询
   
   git reset --hard HEAD^					--HEAD 当前版本，^表示上个版本
   git reset --hard HEAD^^
   git reset --hard HEAD^^^
   git reset --hard HEAD~100				--回退到当前版本前的100个版本
   git reset --hard commit_id				--回到commit_id版本，这个更有效
   
   git log 									--根据log查看commit_id
   git log --pretty =oneline
   
   git reflog								--记录操作命令，可查到commit_id
   
   工作区，版本库，暂存区(stage)
   git add --把修改的文件添加到暂存区
   git commit --提交更改，把暂存区的所有内容提交到当前分支
   
   git管理的是修改，而不是管理文件
   修改 --> git add --> 再次修改 --> git commit
   1. 修改 ---工作区文件修改
   2. git add ---把修改文件放入暂存区
   3. 再次修改 ---工作区文件修改
   4. git commit ---暂存区文件提交到当前分支
   
   git diff HEAD filename   				 --查看工作区文件与版本库文件区别
   
   git diff 和 git diff HEAD filename区别
   
GIT 撤销记录
1. 修改工作区，未添加到暂存区(stage)，撤销
   git checkout --filename
   --非常有必要，如果不写，则表示切换到工作区
   有两种场景：
   ① 修改了工作区文件，还没有git add，执行该命令后，工作区内容恢复到版本库状态；
   ② 修改了工作区文件，已经git add，再次修改文件，执行该命令，则工作区内容恢复到git add后的状态；
   总之，就是让文件恢复到最近一次的git commit或git add状态。
2. 修改工作区，执行git add命令添加到暂存区(stage)，撤销
   git reset HEAD git_study.txt
   